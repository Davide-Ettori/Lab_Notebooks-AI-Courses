{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNn9k0UMVC6WY+iMpiffY3a"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# INITIAL SETUP\n","# - create a new Folder named \"scraping_folder\"\n","# - download the file from the following link and upload it within the folder\n","# https://drive.google.com/file/d/1WREPAe9p9ntJ5TdW-0qkLco8qymdzzh3/view?usp=sharing"],"metadata":{"id":"47QGgGuCWJH2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# this part of the code is only used to setup the environment to run the scraper.\n","%%shell\n","\n","# add debian buster\n","cat > /etc/apt/sources.list.d/debian.list <<'EOF'\n","deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster.gpg] http://deb.debian.org/debian buster main\n","deb [arch=amd64 signed-by=/usr/share/keyrings/debian-buster-updates.gpg] http://deb.debian.org/debian buster-updates main\n","deb [arch=amd64 signed-by=/usr/share/keyrings/debian-security-buster.gpg] http://deb.debian.org/debian-security buster/updates main\n","EOF\n","\n","# add keys\n","apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DCC9EFBF77E11517\n","apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138\n","apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 112695A0E562B32A\n","\n","apt-key export 77E11517 | gpg --dearmour -o /usr/share/keyrings/debian-buster.gpg\n","apt-key export 22F3D138 | gpg --dearmour -o /usr/share/keyrings/debian-buster-updates.gpg\n","apt-key export E562B32A | gpg --dearmour -o /usr/share/keyrings/debian-security-buster.gpg\n","\n","# prefer debian repo for chromium* packages only\n","# note the double-blank lines between entries\n","cat > /etc/apt/preferences.d/chromium.pref << 'EOF'\n","Package: *\n","Pin: release a=eoan\n","Pin-Priority: 500\n","\n","\n","Package: *\n","Pin: origin \"deb.debian.org\"\n","Pin-Priority: 300\n","\n","\n","Package: chromium*\n","Pin: origin \"deb.debian.org\"\n","Pin-Priority: 700\n","EOF"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qI8GYVgtAsdY","executionInfo":{"status":"ok","timestamp":1681717608913,"user_tz":-120,"elapsed":5117,"user":{"displayName":"Andrea Tocchetti","userId":"11305678820098173647"}},"outputId":"ee382f9c-b581-4df4-a38c-6bb69f4ea02f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Executing: /tmp/apt-key-gpghome.kloEK3djg2/gpg.1.sh --keyserver keyserver.ubuntu.com --recv-keys DCC9EFBF77E11517\n","gpg: key DCC9EFBF77E11517: public key \"Debian Stable Release Key (10/buster) <debian-release@lists.debian.org>\" imported\n","gpg: Total number processed: 1\n","gpg:               imported: 1\n","Executing: /tmp/apt-key-gpghome.2pvm4LPryP/gpg.1.sh --keyserver keyserver.ubuntu.com --recv-keys 648ACFD622F3D138\n","gpg: key DC30D7C23CBBABEE: public key \"Debian Archive Automatic Signing Key (10/buster) <ftpmaster@debian.org>\" imported\n","gpg: Total number processed: 1\n","gpg:               imported: 1\n","Executing: /tmp/apt-key-gpghome.UFHD7HksxL/gpg.1.sh --keyserver keyserver.ubuntu.com --recv-keys 112695A0E562B32A\n","gpg: key 4DFAB270CAA96DFA: public key \"Debian Security Archive Automatic Signing Key (10/buster) <ftpmaster@debian.org>\" imported\n","gpg: Total number processed: 1\n","gpg:               imported: 1\n","Warning: apt-key output should not be parsed (stdout is not a terminal)\n","Warning: apt-key output should not be parsed (stdout is not a terminal)\n","Warning: apt-key output should not be parsed (stdout is not a terminal)\n"]},{"output_type":"execute_result","data":{"text/plain":[]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["# install the necessary extra libraries to run the script\n","!apt-get update\n","!apt-get install chromium chromium-driver\n","!pip install selenium\n","!pip install webdriver-manager"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UHRXsHJ92Wt5","executionInfo":{"status":"ok","timestamp":1681721099735,"user_tz":-120,"elapsed":5180,"user":{"displayName":"Andrea Tocchetti","userId":"11305678820098173647"}},"outputId":"a7111bd5-275e-455d-ebbe-1acb42fb7119"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pyvirtualdisplay\n","  Downloading PyVirtualDisplay-3.0-py3-none-any.whl (15 kB)\n","Installing collected packages: pyvirtualdisplay\n","Successfully installed pyvirtualdisplay-3.0\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_0qh3KfByfeU"},"outputs":[],"source":["# import selenium, BeautifulSoup and other libraries to run the script\n","from selenium import webdriver\n","from selenium.webdriver.chrome.options import Options\n","from selenium.webdriver.chrome.service import Service\n","from webdriver_manager.chrome import ChromeDriverManager\n","from selenium.webdriver.support.ui import WebDriverWait\n","from selenium.webdriver.common.by import By\n","from selenium.webdriver.support import expected_conditions as EC\n","from bs4 import BeautifulSoup\n","from IPython.display import Image, display, clear_output\n","import re\n","import time\n","\n","# define a constant to define the maximum waiting time\n","MAX_WAIT = 10"]},{"cell_type":"code","source":["# define a function to take a screenshot of the headless browser and display it\n","def take_screenshot(driver):\n","    driver.save_screenshot(\"/content/scraping_folder/pageImage.png\")\n","    display(Image(filename=\"/content/scraping_folder/pageImage.png\"))\n","    print()"],"metadata":{"id":"FvUZFPQ74g4L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# define a function to take a screenshot of the headless browser and display it, then clean the outcome after a few seconds\n","def take_screenshot_and_clear(driver):\n","    driver.save_screenshot(\"/content/scraping_folder/pageImage.png\")\n","    display(Image(filename=\"/content/scraping_folder/pageImage.png\"))\n","    \n","    time.sleep(3)\n","    clear_output(wait=True)"],"metadata":{"id":"EjkhzamS4kJa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# kill the chrome process to ensure a fresh start\n","!pkill chrome\n","\n","# define the options to run Chrome\n","# IMPORTANT: these options are quite essential, especially when running it in a remote environment like Google Colab\n","options = webdriver.ChromeOptions()\n","# define the size of the window\n","options.add_argument(\"--window-size=1920,1080\")\n","# disable notifications to avoid useless interactions \n","options.add_argument(\"--disable-notifications\")\n","# disable the developer options\n","options.add_argument('--disable-dev-shm-usage')\n","# set the browser to be headless (i.e., the browser window will be hidden)\n","options.add_argument('--headless')\n","# set the browser to run all scripts\n","options.add_argument('--no-sandbox')\n","\n","# Selenium (Chrome) driver with the options defined\n","driver = webdriver.Chrome(options=options)\n","\n","# input file, containing a list of urls\n","urls = open('/content/scraping_folder/places_gm.txt')\n","\n","accept_privacy = True\n","\n","# iterate over the file and scrape data from each url\n","for url in urls:\n","\n","    # get the page\n","    driver.get(url)\n","    \n","    # if the privacy hasn't been accepted\n","    if(accept_privacy):\n","        take_screenshot_and_clear(driver)\n","    \n","    # wait element\n","    wait = WebDriverWait(driver, MAX_WAIT)\n","    \n","    # accept privacy, if needed\n","    if(accept_privacy):\n","\n","        # look for the element containing the accept/reject buttons\n","        privacy_buttons = driver.find_elements(By.CLASS_NAME, 'lssxud')\n","        \n","        # if they are found\n","        if len(privacy_buttons) > 0:\n","            # wait for the tag containing the button to be clickable\n","            wait.until(EC.element_to_be_clickable((By.CLASS_NAME, 'AIC7ge')))\n","\n","            # click the accept button\n","            privacy_buttons[1].find_element(By.TAG_NAME, 'button').click()\n","        \n","        accept_privacy = False\n","    \n","    # wait for content to load\n","    wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id=\"QA0Szd\"]/div/div/div[1]/div[2]/div/div[1]/div/div/div[1]/div[1]/button/img')))\n","\n","    take_screenshot(driver)\n","    \n","    # send the page extracted with Selenium to BeautifulSoap parser\n","    response = BeautifulSoup(driver.page_source, 'html.parser')\n","    \n","    # prepare a dictionary to store results\n","    place = {}\n","\n","    # get place name\n","    name = response.find('h1', class_ = 'DUwDvf').text\n","    place['name'] = name\n","    \n","    # get number of reviews\n","    n_reviews = response.find('div', class_='F7nice').find_all(attrs={\"aria-label\":True})[1].text.replace('.', '').replace('(', '').replace(')', '')\n","\n","    # casting to correct type\n","    n_reviews = int(n_reviews.split(' ')[0].replace(',', ''))\n","    place['review'] = n_reviews\n","\n","    # get rating using\n","    overall_rating = response.find('div', class_='F7nice').find_all(attrs={\"aria-hidden\":True})[0].text\n","\n","    # casting to correct type\n","    overall_rating = float(overall_rating.replace(',', '.'))\n","    place['rating'] = overall_rating\n","\n","    # get address\n","    complete_address = response.find_all('div', class_='rogA2c')[3].find('div', class_='Io6YTe').text\n","    place['address'] = complete_address.strip()\n","\n","    # get type of place\n","    location_type = response.find('button', class_='DkEaL').text\n","    place['type'] = location_type\n","\n","    # save result into MongoDB collection\n","    print(place)\n","    \n","    time.sleep(3)\n","    clear_output(wait=True)\n","\n","# close file\n","urls.close()\n","\n","# close driver and quit\n","driver.close()\n","driver.quit()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":643,"output_embedded_package_id":"15k5yhAFkRdlHNEV9Vg8xzBUFg_TZLu8q"},"id":"2tnMpmq84zZ1","executionInfo":{"status":"ok","timestamp":1681725661784,"user_tz":-120,"elapsed":133285,"user":{"displayName":"Andrea Tocchetti","userId":"11305678820098173647"}},"outputId":"b6c5f345-188b-4273-c8b0-10b90ff65332"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]}]}